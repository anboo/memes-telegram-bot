// Code generated by MockGen. DO NOT EDIT.
// Source: handler/send_mem/interfaces.go

// Package send_mem is a generated GoMock package.
package send_mem

import (
	context "context"
	mem "memes-bot/storage/mem"
	user "memes-bot/storage/user"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockMemRepository is a mock of MemRepository interface.
type MockMemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemRepositoryMockRecorder
}

// MockMemRepositoryMockRecorder is the mock recorder for MockMemRepository.
type MockMemRepositoryMockRecorder struct {
	mock *MockMemRepository
}

// NewMockMemRepository creates a new mock instance.
func NewMockMemRepository(ctrl *gomock.Controller) *MockMemRepository {
	mock := &MockMemRepository{ctrl: ctrl}
	mock.recorder = &MockMemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemRepository) EXPECT() *MockMemRepositoryMockRecorder {
	return m.recorder
}

// FindRelevantMemForUser mocks base method.
func (m *MockMemRepository) FindRelevantMemForUser(ctx context.Context, u user.User) (mem.Mem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRelevantMemForUser", ctx, u)
	ret0, _ := ret[0].(mem.Mem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRelevantMemForUser indicates an expected call of FindRelevantMemForUser.
func (mr *MockMemRepositoryMockRecorder) FindRelevantMemForUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRelevantMemForUser", reflect.TypeOf((*MockMemRepository)(nil).FindRelevantMemForUser), ctx, u)
}

// ReserveNewMem mocks base method.
func (m *MockMemRepository) ReserveNewMem(ctx context.Context, user user.User, mem mem.Mem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveNewMem", ctx, user, mem)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveNewMem indicates an expected call of ReserveNewMem.
func (mr *MockMemRepositoryMockRecorder) ReserveNewMem(ctx, user, mem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveNewMem", reflect.TypeOf((*MockMemRepository)(nil).ReserveNewMem), ctx, user, mem)
}

// MockTelegramAPI is a mock of TelegramAPI interface.
type MockTelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramAPIMockRecorder
}

// MockTelegramAPIMockRecorder is the mock recorder for MockTelegramAPI.
type MockTelegramAPIMockRecorder struct {
	mock *MockTelegramAPI
}

// NewMockTelegramAPI creates a new mock instance.
func NewMockTelegramAPI(ctrl *gomock.Controller) *MockTelegramAPI {
	mock := &MockTelegramAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramAPI) EXPECT() *MockTelegramAPIMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockTelegramAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockTelegramAPIMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegramAPI)(nil).Send), c)
}

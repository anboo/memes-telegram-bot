// Code generated by MockGen. DO NOT EDIT.
// Source: handler/config_source/interfaces.go

// Package config_source is a generated GoMock package.
package config_source

import (
	context "context"
	user_source "memes-bot/storage/user_source"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockUserSourceRepository is a mock of UserSourceRepository interface.
type MockUserSourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSourceRepositoryMockRecorder
}

// MockUserSourceRepositoryMockRecorder is the mock recorder for MockUserSourceRepository.
type MockUserSourceRepositoryMockRecorder struct {
	mock *MockUserSourceRepository
}

// NewMockUserSourceRepository creates a new mock instance.
func NewMockUserSourceRepository(ctrl *gomock.Controller) *MockUserSourceRepository {
	mock := &MockUserSourceRepository{ctrl: ctrl}
	mock.recorder = &MockUserSourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSourceRepository) EXPECT() *MockUserSourceRepositoryMockRecorder {
	return m.recorder
}

// ByUserId mocks base method.
func (m *MockUserSourceRepository) ByUserId(ctx context.Context, userId string) ([]user_source.UserSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUserId", ctx, userId)
	ret0, _ := ret[0].([]user_source.UserSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUserId indicates an expected call of ByUserId.
func (mr *MockUserSourceRepositoryMockRecorder) ByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUserId", reflect.TypeOf((*MockUserSourceRepository)(nil).ByUserId), ctx, userId)
}

// Create mocks base method.
func (m *MockUserSourceRepository) Create(ctx context.Context, us *user_source.UserSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, us)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserSourceRepositoryMockRecorder) Create(ctx, us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSourceRepository)(nil).Create), ctx, us)
}

// MockTelegramAPI is a mock of TelegramAPI interface.
type MockTelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramAPIMockRecorder
}

// MockTelegramAPIMockRecorder is the mock recorder for MockTelegramAPI.
type MockTelegramAPIMockRecorder struct {
	mock *MockTelegramAPI
}

// NewMockTelegramAPI creates a new mock instance.
func NewMockTelegramAPI(ctrl *gomock.Controller) *MockTelegramAPI {
	mock := &MockTelegramAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramAPI) EXPECT() *MockTelegramAPIMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockTelegramAPI) Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", c)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockTelegramAPIMockRecorder) Request(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockTelegramAPI)(nil).Request), c)
}

// Send mocks base method.
func (m *MockTelegramAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockTelegramAPIMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegramAPI)(nil).Send), c)
}
